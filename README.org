#+TITLE: ROS Documentation

* TF

In Rviz, the axes colors are as follows:

- X axis :: red
- Y axis :: green
- Z axis :: blue

* Cameras
** Frames

The ~camera_link~ frame is a center point for all other link frames to relate to. In the D400 series, this is defined as the ~camera_depth_frame~. To verify, we can run:

#+BEGIN_SRC bash
rosrun tf tf_echo camera_depth_frame camera_link
#+END_SRC

We should see:

#+BEGIN_SRC text
At time 0.000
- Translation: [0.000, 0.000, 0.000]
- Rotation: in Quaternion [0.000, 0.000, 0.000, 1.000]
            in RPY (radian) [0.000, -0.000, 0.000]
            in RPY (degree) [0.000, -0.000, 0.000]
#+END_SRC

Image data is usually published in the optical frame of the camera. In practice, this means that to obtain camera data in another base frame,
** Realsense
*** Camera Calibration

** Image Processing
[[https://wiki.ros.org/depth_image_proc][depth_image_proc]] is a library that processes depth images produced by cameras such as the [[Realsense]].

~depth_image_proc/convert_metric~ converts raw uint16 images in mm to float depth image in m.

* AprilTag

[[https://april.eecs.umich.edu/software/apriltag][AprilTag]] is a visual fiducial system that is useful for multiple robotics tasks, including camera calibration. It uses simple printed targets that look like QR codes. The [[http://wiki.ros.org/apriltag_ros][AprilTag ROS]] library is able to establish the tf transform betwen the tag and the camera.

#+BEGIN_SRC bash
rosrun apriltag_ros continuous_detection.launch
#+END_SRC

To establish a transform between a camera and a base frame (e.g. a robot), we place the april tag at a known displacement (and rotation) from the robot frame. To publish a static transfrom, we use:

#+BEGIN_SRC bash
rosrun tf static_tf_publisher ...
#+END_SRC

We use the AprilTag to compute the transform from the camera to the tag.

We can then do:

#+BEGIN_SRC bash
rosrun tf tf_echo camera_link robot_frame
#+END_SRC

And save this transform for later use.
